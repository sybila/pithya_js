<%!
  import os
  import glob
  import re
  from itertools import chain
  from routes import url_for

  prefix = url_for("/")
  path = os.getcwd()
  
%>
<%
  app_root = "config/plugins/visualizations/"+visualization_name+"/"
  
  data = list(hda.datatype.dataprovider(
    hda, 
    'line', 
    strip_lines=True, 
    strip_newlines=True ))
  data_text = "\\n".join(data)
  
  thrs = {'E2F1': [0,0.5,1.5,3,5], 'pRB': [0,0.5,1.5,3,5,8]}
  trans = {
    0:[0,5],
    1:[1,0,6],
    2:[2,1,7],
    3:[3,2,8],
    4:[3,4,9],
    5:[5,10],
    6:[6,11],
    7:[12],
    8:[13],
    9:[14],
    10:[11,15],
    11:[16,12],
    12:[13,17],
    13:[14,18],
    14:[19],
    15:[16],
    16:[17],
    17:[18],
    18:[19],
    19:[14]
  }
  
%>
<html lan"en">
  
  <head>
    <title>TSS - Transition State Space</title>
  
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1, maximum-scale=1">
    <style>
      body {
        font-family: helvetica;
        font-size: 14px;
      }
      
      #cy {
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
        z-index: 999;
      }
      
      h1 {
        opacity: 0.5;
        font-size: 1em;
      }
    </style>

    <!-- For loading external data files -->
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=Promise,fetch"></script>

    <script src="static/node_modules/cytoscape/dist/cytoscape.js"></script>

    <!-- for testing with local version of cytoscape.js -->
    <!-- <script src="../cytoscape.js/build/cytoscape.js"></script> -->
  </head>
  
  <body>
    <h1>Grid demo</h1>
    <div id="cy"></div>
    <!-- Load appplication code at the end to ensure DOM is loaded -->
    <!--script src="code.js"></script-->
    <script type="text/javascript" charset="utf-8">
    
      var yStep = window.innerHeight / Math.max.apply(null,${thrs["E2F1"]});
      var xStep = window.innerWidth / Math.max.apply(null,${thrs["pRB"]});
      var index = 1;
      var data = [
        % for yi in range(len(thrs['E2F1'])-1):
          % for xi in range(len(thrs['pRB'])-1):
            {
              "data": {"id":"n${yi*(len(thrs['pRB'])-1)+xi}", "width":${abs(thrs['pRB'][xi]-thrs['pRB'][xi+1])}*xStep, "height":${abs(thrs['E2F1'][yi]-thrs['E2F1'][yi+1])}*yStep},
              "position": {"x":${(thrs['pRB'][xi]+thrs['pRB'][xi+1])*0.5}*xStep, "y":${(thrs['E2F1'][yi]+thrs['E2F1'][yi+1])*0.5}*yStep},
              "group": "nodes",
              "removed": false,
              "selected": false,
              "selectable": true,
              "locked": true,
              "grabbable": true
            },
          % endfor
        % endfor
        % for s in trans:
          % for t in trans[loop.index]:
            {
              "data": {"id":"e${loop.parent.index}-${t}", "source":"n${loop.parent.index}", "target":"n${t}"},
              "group": "edges",
              "removed": false,
              "selected": false,
              "selectable": false,
              "locked": true,
              "grabbable": false
            },
          % endfor
        % endfor
      ]
      
    
      //fetch('static/cytoscape_data.json')//, {mode: 'no-cors'})
      //.then(function(res) {
      //  return res.json()
      //})
      //.then(function(data) {
        var cy = window.cy = cytoscape({
          container: document.getElementById('cy'),
    
          boxSelectionEnabled: false,
          autounselectify: true,
          autoungrabify: true,
    
          layout: {
            name: 'grid'
          },
    
          style: [
            {
              selector: 'node',
              style: {
                'label': 'data(id)',
                'border-color': 'black',
                'border-style': 'solid',
                'border-width': 1,
                'background-color': '#18e018',
                'shape': 'rectangle',
                'width': 'data(width)',
                'height': 'data(height)',
                'opacity': 0.8,
                'z-compound-depth': 'bottom',
              },
            },
            {
              selector: 'edge',
              style: {
                'curve-style': 'bezier',
                //'label': 'data(id)',
                'width': 3,
                'source-endpoint': 'inside-to-node',
                'target-endpoint': 'inside-to-node',
                'target-arrow-shape': 'triangle',
                'target-arrow-color': 'black',
                'target-arrow-fill': 'filled',
                'line-color': 'black',
                'z-compound-depth': 'auto',
                'loop-direction': '0deg',
                'loop-sweep': '90deg',
              },
            },
          ],
    
          elements: data
        });
      //});
    </script>
  </body>

</html>
